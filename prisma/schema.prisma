// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostStatus {
  SYNCED
  NOT_SYNCED
  NEED_SYNC
}

model User {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  username    String   @unique
  password    String   @db.Text
  description String?  @db.Text
  email       String?  @unique
  dob         Int?
  avatarUrl   String?  @db.VarChar(500)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]
  posts       Post[]

  ratings Rating[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Post {
  id           Int        @id @default(autoincrement())
  title        String     @db.VarChar(255)
  slug         String     @unique @db.VarChar(255)
  content      String     @db.Text
  thumbnailUrl String?    @db.VarChar(500)
  isPublished  Boolean?   @default(true)
  views        Int        @default(0)
  categories   Category[]
  comments     Comment[]
  ratings      Rating[]
  author       User       @relation(fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  // sync log 
  PostLog      PostLog[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  replies   Comment[] @relation("CommentReplies")
  Post      Post      @relation(fields: [postId], references: [id])

  postId          Int
  parentComment   Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId Int?
}

model Rating {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId]) // Đảm bảo mỗi user chỉ có thể thả một cảm xúc cho mỗi bài viết
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  // Liên kết với bảng trung gian
  parents  Category[] @relation("CategoryRelationship")
  children Category[] @relation("CategoryRelationship")
}

// Sync log
model PostLog {
  id        Int        @id @default(autoincrement())
  post      Post       @relation(fields: [postId], references: [id])
  postId    Int
  status    PostStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
