//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum NotificationType {
  REACTION
  COMMENT
  REPLY
  SYSTEM
}

enum NotificationItemType {
  post
  comment
}

enum PostStatus {
  SYNCED
  NOT_SYNCED
  NEED_SYNC
}

model User {
  id             Int             @id() @default(autoincrement())
  name           String          @db.VarChar(255)
  username       String          @unique()
  password       String          @db.Text()
  description    String?         @db.Text()
  email          String?         @unique()
  dob            Int?
  avatarUrl      String?         @db.VarChar(500)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt()
  roles          Role[]
  posts          Post[]
  ratings        Rating[]
  comments       Comment[]
  commentRatings CommentRating[]
  notification   Notification[]
}

model Role {
  id        Int      @id() @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  users     User[]
}

model Post {
  id           Int        @id() @default(autoincrement())
  title        String     @db.VarChar(255)
  description  String?    @db.Text()
  slug         String     @unique() @db.VarChar(255)
  content      String     @db.Text()
  thumbnailUrl String?    @db.VarChar(500)
  isPublished  Boolean?   @default(true)
  views        Int        @default(0)
  categories   Category[]
  comments     Comment[]
  ratings      Rating[]
  author       User       @relation(fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt()
  PostLog      PostLog[]
}

model Comment {
  id              Int             @id() @default(autoincrement())
  content         String          @db.Text()
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt()
  replies         Comment[]       @relation("CommentReplies")
  Post            Post            @relation(fields: [postId], references: [id])
  userId          Int
  user            User            @relation(fields: [userId], references: [id])
  postId          Int
  parentComment   Comment?        @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId Int?
  commentRatings  CommentRating[]
}

model Rating {
  id        Int      @id() @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, postId])
}

model CommentRating {
  id        Int      @id() @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, commentId])
}

model Category {
  id        Int        @id() @default(autoincrement())
  name      String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt()
  posts     Post[]
  parents   Category[] @relation("CategoryRelationship")
  children  Category[] @relation("CategoryRelationship")
}

model PostLog {
  id        Int        @id() @default(autoincrement())
  post      Post       @relation(fields: [postId], references: [id])
  postId    Int
  status    PostStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt()
}

model Notification {
  id             Int                   @id() @default(autoincrement())
  createdAt      DateTime              @default(now())
  user           User                  @relation(fields: [userId], references: [id])
  userId         Int
  read           Boolean               @default(false)
  type           NotificationType
  itemType       NotificationItemType?
  itemId         Int?
  messageTitle   String?
  messageContent String?

  @@unique([itemType, itemId])
}
